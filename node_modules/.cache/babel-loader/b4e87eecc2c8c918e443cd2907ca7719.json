{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const history = useHistory();\n  const [unit, setUnit] = useState(\"metric\");\n  const [enteredCity, setEnteredCity] = useState(\"\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const [cityList, setCities] = useState([]);\n\n  const deleteCityHandler = cityName => {\n    console.log(\"in forecast.js ovo je cityname= \" + cityName);\n    setError(false);\n    let updatedCities;\n    updatedCities = cityList.filter(item => item.responseObj.name !== cityName);\n    setCities(updatedCities);\n  };\n\n  const addToFavoritesHandler = cityName => {\n    console.log(\"in Forecast.js i want to add city to favorites \" + cityName);\n  };\n\n  const ifExist = enteredCity => {\n    console.log(\"provjeri postojanje grada \" + enteredCity);\n\n    for (var city in cityList) {\n      console.log(\"provjeravam grad \");\n      console.log(cityList[city]);\n\n      if (enteredCity === cityList[city].key) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const getForecast = useCallback(async e => {\n    if (e) {\n      e.preventDefault();\n    } //clear states for new data\n\n\n    setError(false);\n    setLoading(true);\n\n    try {\n      if (cityList.length === 10) {\n        throw new Error(\"Max 10 cities allowed!\");\n      }\n\n      if (enteredCity.trim().length === 0) {\n        throw new Error('Input is empty - try again!');\n      }\n\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n\n      if (!response.ok) {\n        throw new Error(\"Please enter valid city\");\n      } else {\n        // waits until the request completes...\n        const data = await response.json();\n        setResponseObj(data);\n        setLoading(false);\n        console.log(\"provjeravam je li ima dupli grad\");\n\n        if (ifExist(data.name)) {\n          throw new Error('City is already listed!');\n        }\n\n        const responseCity = {\n          key: data.name,\n          responseObj: data,\n          error: false,\n          loading: loading\n        };\n        setCities(prevCities => {\n          const updated = [...prevCities, responseCity];\n          return updated;\n        });\n      }\n    } catch (error) {\n      setError(error.message);\n      console.log(\"error message\");\n    }\n\n    setLoading(false);\n  });\n\n  const onFavoritesHandler = () => {\n    console.log(\"GO TO FAVORITES AJMO\");\n    history.replace(\"/weather/favorites\");\n  };\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 19\n  }, this);\n\n  let errorContent = /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 24\n  }, this);\n\n  if (cityList.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(ForecastList, {\n      cities: cityList,\n      onDelete: deleteCityHandler,\n      onAddToFavorites: addToFavoritesHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }, this);\n    console.log(cityList);\n  }\n\n  if (error) {\n    errorContent = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.Small,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 24\n    }, this);\n  }\n\n  if (loading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: enteredCity,\n        onChange: e => setEnteredCity(e.target.value),\n        className: styles.TextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), \"Celsius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onFavoritesHandler,\n      className: styles.Button,\n      children: \"Go to favorites\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this), error && errorContent, /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"0+wDnkoFw2zq1Xp4wzSwOVsOOqk=\", false, function () {\n  return [useHistory];\n});\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js"],"names":["React","useState","useCallback","useEffect","styles","ForecastList","Link","useHistory","Forecast","history","unit","setUnit","enteredCity","setEnteredCity","responseObj","setResponseObj","error","setError","loading","setLoading","cityList","setCities","deleteCityHandler","cityName","console","log","updatedCities","filter","item","name","addToFavoritesHandler","ifExist","city","key","getForecast","e","preventDefault","length","Error","trim","response","fetch","ok","data","json","responseCity","prevCities","updated","message","onFavoritesHandler","replace","content","errorContent","Small","target","value","TextInput","Radio","Button"],"mappings":"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","sourcesContent":["import React , {useState, useCallback, useEffect} from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport {Link} from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\n\n\n\nconst Forecast = () => {\n\n    const history = useHistory();\n\n\n    const [unit,setUnit] = useState(\"metric\");\n    const [enteredCity, setEnteredCity] = useState(\"\");\n    let [responseObj, setResponseObj] = useState({});\n\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    const [cityList, setCities] = useState([]);\n\n    const deleteCityHandler = (cityName) => {\n        console.log(\"in forecast.js ovo je cityname= \"+cityName);\n        setError(false);\n        let updatedCities;\n\n        updatedCities = cityList.filter(item => item.responseObj.name !== cityName);\n        setCities(updatedCities);\n    }\n\n    const addToFavoritesHandler = (cityName) => {\n        console.log(\"in Forecast.js i want to add city to favorites \" +cityName);\n    }\n\n\n    const ifExist = (enteredCity) => {\n        console.log(\"provjeri postojanje grada \"+enteredCity);\n        for(var city in cityList){\n            console.log(\"provjeravam grad \");\n            console.log(cityList[city]);\n            if (enteredCity === cityList[city].key){\n                return true;\n            }\n        }\n        return false;\n    };\n\n\n    const getForecast = useCallback(async (e) => {\n        if(e){\n            e.preventDefault();\n        }\n\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        try{\n            if (cityList.length === 10) {\n                throw new Error(\"Max 10 cities allowed!\");\n            }\n\n            if(enteredCity.trim().length === 0){\n                throw new Error('Input is empty - try again!');\n            }\n\n\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n            if (!response.ok) {\n                throw new Error(\"Please enter valid city\");\n            }\n\n            \n            else {\n                // waits until the request completes...\n                const data = await response.json();\n\n                setResponseObj(data);\n                setLoading(false);\n\n                console.log(\"provjeravam je li ima dupli grad\");\n                if (ifExist(data.name)){\n                    throw new Error('City is already listed!');\n                }\n\n                const responseCity = {\n                    key : data.name,\n                    responseObj : data,\n                    error : false,\n                    loading : loading\n                }\n                \n                setCities((prevCities) => {\n                    const updated = [...prevCities,responseCity];\n                    return updated;\n                });\n            }\n            \n        } catch (error) {\n            setError(error.message);\n            console.log(\"error message\");\n        }\n        setLoading(false);\n    \n    });\n\n    const onFavoritesHandler = () => {\n        console.log(\"GO TO FAVORITES AJMO\")\n        history.replace(\"/weather/favorites\");\n    };\n\n    let content = <p></p>;\n    let errorContent = <p></p>;\n\n    if (cityList.length > 0) {\n        content = <ForecastList cities={cityList} onDelete={deleteCityHandler} onAddToFavorites={addToFavoritesHandler}/>;\n        console.log(cityList);\n    }\n\n    if (error) {\n        errorContent = <p className={styles.Small}>{error}</p>;\n    }\n\n    if (loading) {\n        content = <p>Loading...</p>;\n    }\n        \n\n\n    return(\n        <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={enteredCity}\n                    onChange={(e) => setEnteredCity(e.target.value)}\n                    className={styles.TextInput}\n                    />\n\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celsius\n                </label>\n                <button className={styles.Button} type=\"submit\">Get Forecast</button>\n            </form>\n\n            <button onClick={onFavoritesHandler} className={styles.Button} >Go to favorites</button>\n\n            {error && errorContent}\n            <section>{content}</section>\n        </div>\n    );\n\n}\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}