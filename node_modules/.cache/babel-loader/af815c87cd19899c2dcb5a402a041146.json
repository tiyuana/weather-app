{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [unit, setUnit] = useState(\"metric\");\n  const [enteredCity, setEnteredCity] = useState(\"\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const [cityList, setCities] = useState([]); //---------------------------------------------------------------------\n\n  function getForecast(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    console.log(\"daj prognozu!\");\n    console.log(\"entered city = \");\n    console.log(enteredCity);\n\n    if (enteredCity.trim().length === 0) {\n      console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n      return setError(true);\n    } //clear states for new data\n\n\n    setError(false);\n    setLoading(true); //setError(null);\n\n    try {\n      const response = fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = response.json();\n\n      if (data.cod !== 200) {\n        setResponseObj(data);\n        throw new Error();\n      }\n\n      setResponseObj(data);\n      setLoading(false);\n      console.log(\"response\");\n      console.log(data);\n    } catch (error) {\n      setError(true);\n    }\n\n    console.log(\"response\");\n    console.log(responseObj);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    getForecast();\n  }, [getForecast]); //---------------------------------------------------------------------\n\n  /*\n      const updateCityList = (responseCity) => {\n          console.log(\"cityList \");\n          console.log(cityList);\n          console.log(\"response city \")\n          console.log(responseCity)\n  \n          setCities((prevCities) => {\n              return [...prevCities,responseCity];\n            });\n  \n          console.log(\"cityList \");\n          console.log(cityList);\n  \n      }\n  \n      async function fetchForecastJSON() {\n          const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n          // waits until the request completes...\n          const conditions = await response.json();\n          console.log(\"response \");\n          console.log(response);\n          return conditions;\n      }\n      //nacin3\n      const getForecast = (e) => {\n          e.preventDefault();\n          console.log(\"daj prognozu!\");\n  \n          if(enteredCity.trim().length === 0){\n              console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n              return setError(true);\n          }\n          //clear states for new data\n          setError(false);\n          setLoading(true);\n  \n          fetchForecastJSON()\n          .then(response => {\n              console.log(\"response = \");\n              console.log(response);\n              if(response.cod !== 200){\n                  setResponseObj(response)\n                  throw new Error()\n              }\n              setResponseObj(response)\n              setLoading(false);\n         })\n         .catch(error => {\n             setError(true);\n             setLoading(false);\n  \n             console.log(error.message);\n             console.log(\"uhvatio sam error!\");\n         })\n  \n         //console.log(\"evo citilist =\");\n         //console.log(cityList);\n         const responseCity = {\n             key : enteredCity,\n             response : responseObj,\n             error : error,\n             loading : loading\n         }\n         updateCityList(responseCity);\n         //console.log(\"evo citilist =\");\n         //console.log(cityList);\n  \n      }\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: enteredCity,\n        onChange: e => setEnteredCity(e.target.value),\n        className: styles.TextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), \"Celsius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(ForecastList, {\n      cities: cityList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"JlpMNKIffadgCEb2zUbshRLzzEY=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js"],"names":["React","useState","useEffect","useCallback","Conditions","styles","ForecastList","Forecast","unit","setUnit","enteredCity","setEnteredCity","responseObj","setResponseObj","error","setError","loading","setLoading","cityList","setCities","getForecast","e","preventDefault","console","log","trim","length","response","fetch","ok","Error","data","json","cod","target","value","TextInput","Radio","Button"],"mappings":"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","sourcesContent":["import React , {useState, useEffect, useCallback} from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\n\n\nconst Forecast = () => {\n\n    const [unit,setUnit] = useState(\"metric\");\n    const [enteredCity, setEnteredCity] = useState(\"\");\n    let [responseObj, setResponseObj] = useState({});\n\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n\n    const [cityList, setCities] = useState([]);\n    \n    //---------------------------------------------------------------------\n    function getForecast(e) {\n        if(e){\n            e.preventDefault();\n\n        }\n        console.log(\"daj prognozu!\");\n        console.log(\"entered city = \");\n        console.log(enteredCity);\n\n        if(enteredCity.trim().length === 0){\n            console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n            return setError(true);\n        }\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        //setError(null);\n        try {\n            const response =  fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n            if (!response.ok) {\n                throw new Error('Something went wrong!');\n            }\n        \n            const data =  response.json();\n            if(data.cod !== 200){\n                setResponseObj(data)\n                throw new Error()\n            }\n            setResponseObj(data)\n            setLoading(false);\n            console.log(\"response\");\n            console.log(data);\n        }\n        \n            \n        catch (error) {\n            setError(true);\n        }\n\n        console.log(\"response\");\n        console.log(responseObj);\n        setLoading(false);\n    }\n    \n      useEffect(() => {\n        getForecast();\n      }, [getForecast]);\n\n    //---------------------------------------------------------------------\n\n/*\n    const updateCityList = (responseCity) => {\n        console.log(\"cityList \");\n        console.log(cityList);\n        console.log(\"response city \")\n        console.log(responseCity)\n\n        setCities((prevCities) => {\n            return [...prevCities,responseCity];\n          });\n\n        console.log(\"cityList \");\n        console.log(cityList);\n\n    }\n\n    async function fetchForecastJSON() {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n        // waits until the request completes...\n        const conditions = await response.json();\n        console.log(\"response \");\n        console.log(response);\n        return conditions;\n    }\n    //nacin3\n    const getForecast = (e) => {\n        e.preventDefault();\n        console.log(\"daj prognozu!\");\n\n        if(enteredCity.trim().length === 0){\n            console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n            return setError(true);\n        }\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        fetchForecastJSON()\n        .then(response => {\n            console.log(\"response = \");\n            console.log(response);\n            if(response.cod !== 200){\n                setResponseObj(response)\n                throw new Error()\n            }\n            setResponseObj(response)\n            setLoading(false);\n       })\n       .catch(error => {\n           setError(true);\n           setLoading(false);\n\n           console.log(error.message);\n           console.log(\"uhvatio sam error!\");\n       })\n\n       //console.log(\"evo citilist =\");\n       //console.log(cityList);\n       const responseCity = {\n           key : enteredCity,\n           response : responseObj,\n           error : error,\n           loading : loading\n       }\n       updateCityList(responseCity);\n       //console.log(\"evo citilist =\");\n       //console.log(cityList);\n\n    }\n*/\n    \n    return(\n        <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={enteredCity}\n                    onChange={(e) => setEnteredCity(e.target.value)}\n                    className={styles.TextInput}\n                    />\n\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celsius\n                </label>\n                <button className={styles.Button} type=\"submit\">Get Forecast</button>\n            </form>\n                {<ForecastList cities={cityList}/>}\n        </div>\n    );\n\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}