{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [unit, setUnit] = useState(\"metric\");\n  const [enteredCity, setEnteredCity] = useState(\"\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const [cityList, setCities] = useState([]); //---------------------------------------------------------------------\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-http-6b4a6.firebaseio.com/movies.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      const loadedMovies = [];\n\n      for (const key in data) {\n        loadedMovies.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n\n      setMovies(loadedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); //---------------------------------------------------------------------\n\n  const updateCityList = responseCity => {\n    console.log(\"cityList \");\n    console.log(cityList);\n    console.log(\"response city \");\n    console.log(responseCity);\n    setCities(prevCities => {\n      return [...prevCities, responseCity];\n    });\n    console.log(\"cityList \");\n    console.log(cityList);\n  };\n\n  async function fetchForecastJSON() {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`); // waits until the request completes...\n\n    const conditions = await response.json();\n    console.log(\"response \");\n    console.log(response);\n    return conditions;\n  } //nacin3\n\n\n  const getForecast = e => {\n    e.preventDefault();\n    console.log(\"daj prognozu!\");\n\n    if (enteredCity.trim().length === 0) {\n      console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n      return setError(true);\n    } //clear states for new data\n\n\n    setError(false);\n    setLoading(true);\n    fetchForecastJSON().then(response => {\n      console.log(\"response = \");\n      console.log(response);\n\n      if (response.cod !== 200) {\n        setResponseObj(response);\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n    }).catch(error => {\n      setError(true);\n      setLoading(false);\n      console.log(error.message);\n      console.log(\"uhvatio sam error!\");\n    }); //console.log(\"evo citilist =\");\n    //console.log(cityList);\n\n    const responseCity = {\n      key: enteredCity,\n      response: responseObj,\n      error: error,\n      loading: loading\n    };\n    updateCityList(responseCity); //console.log(\"evo citilist =\");\n    //console.log(cityList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: enteredCity,\n        onChange: e => setEnteredCity(e.target.value),\n        className: styles.TextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), \"Celsius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(ForecastList, {\n      cities: cityList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"NU+c2RO1nKQTtRHEw5CFkAJNQwE=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js"],"names":["React","useState","useEffect","useCallback","Conditions","styles","ForecastList","Forecast","unit","setUnit","enteredCity","setEnteredCity","responseObj","setResponseObj","error","setError","loading","setLoading","cityList","setCities","fetchMoviesHandler","setIsLoading","response","fetch","ok","Error","data","json","loadedMovies","key","push","id","title","openingText","releaseDate","setMovies","message","updateCityList","responseCity","console","log","prevCities","fetchForecastJSON","conditions","getForecast","e","preventDefault","trim","length","then","cod","catch","target","value","TextInput","Radio","Button"],"mappings":"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","sourcesContent":["import React , {useState, useEffect, useCallback} from 'react';\nimport Conditions from '../Conditions/Conditions';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\n\n\nconst Forecast = () => {\n\n    const [unit,setUnit] = useState(\"metric\");\n    const [enteredCity, setEnteredCity] = useState(\"\");\n    let [responseObj, setResponseObj] = useState({});\n\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n\n    const [cityList, setCities] = useState([]);\n    \n    //---------------------------------------------------------------------\n    const fetchMoviesHandler = useCallback(async () => {\n        setIsLoading(true);\n        setError(null);\n        try {\n          const response = await fetch('https://react-http-6b4a6.firebaseio.com/movies.json');\n          if (!response.ok) {\n            throw new Error('Something went wrong!');\n          }\n    \n          const data = await response.json();\n    \n          const loadedMovies = [];\n    \n          for (const key in data) {\n            loadedMovies.push({\n              id: key,\n              title: data[key].title,\n              openingText: data[key].openingText,\n              releaseDate: data[key].releaseDate,\n            });\n          }\n    \n          setMovies(loadedMovies);\n        } catch (error) {\n          setError(error.message);\n        }\n        setIsLoading(false);\n      }, []);\n    \n      useEffect(() => {\n        fetchMoviesHandler();\n      }, [fetchMoviesHandler]);\n\n    //---------------------------------------------------------------------\n\n\n    const updateCityList = (responseCity) => {\n        console.log(\"cityList \");\n        console.log(cityList);\n        console.log(\"response city \")\n        console.log(responseCity)\n\n        setCities((prevCities) => {\n            return [...prevCities,responseCity];\n          });\n\n        console.log(\"cityList \");\n        console.log(cityList);\n\n    }\n\n    async function fetchForecastJSON() {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n        // waits until the request completes...\n        const conditions = await response.json();\n        console.log(\"response \");\n        console.log(response);\n        return conditions;\n    }\n    //nacin3\n    const getForecast = (e) => {\n        e.preventDefault();\n        console.log(\"daj prognozu!\");\n\n        if(enteredCity.trim().length === 0){\n            console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n            return setError(true);\n        }\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        fetchForecastJSON()\n        .then(response => {\n            console.log(\"response = \");\n            console.log(response);\n            if(response.cod !== 200){\n                setResponseObj(response)\n                throw new Error()\n            }\n            setResponseObj(response)\n            setLoading(false);\n       })\n       .catch(error => {\n           setError(true);\n           setLoading(false);\n\n           console.log(error.message);\n           console.log(\"uhvatio sam error!\");\n       })\n\n       //console.log(\"evo citilist =\");\n       //console.log(cityList);\n       const responseCity = {\n           key : enteredCity,\n           response : responseObj,\n           error : error,\n           loading : loading\n       }\n       updateCityList(responseCity);\n       //console.log(\"evo citilist =\");\n       //console.log(cityList);\n\n    }\n\n    \n    return(\n        <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={enteredCity}\n                    onChange={(e) => setEnteredCity(e.target.value)}\n                    className={styles.TextInput}\n                    />\n\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celsius\n                </label>\n                <button className={styles.Button} type=\"submit\">Get Forecast</button>\n            </form>\n                {<ForecastList cities={cityList}/>}\n        </div>\n    );\n\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}