{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/DailyWeather/DailyWeather.js\",\n    _s = $RefreshSig$();\n\nimport react, { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DailyWeather = props => {\n  _s();\n\n  const params = useParams();\n\n  const fetchData = async () => {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${params.cityId}&units=metric&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n    const data = await response.json();\n    console.log(data);\n    /*const dailyData = data.list.filter(reading => {   \n        return reading.dt_txt.includes(\"18:00:00\")\n        }\n      )\n    console.log(\"ovo je filtrirano\");\n    console.log(dailyData);*/\n\n    for (let i = 0; i < 40; i = i + 8) {\n      let data_time = data.list[i].dt_txt.split(\" \")[0].split(\"-\");\n      let month = getMonth(data_time[1]);\n      var date = new Date(data_time[2] + month + data_time[0]);\n      var day = date.getDay();\n      var daysName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      const dailyWeather = {\n        dayName: daysName[day],\n        //icon : \"data.list[i].weather[0].id\",\n        icon: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://openweathermap.org/img/w/${data.list[i].weather[0].icon}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 24\n        }, this),\n        minTemp: data.list[i].main.temp_min,\n        maxTemp: data.list[i].main.temp_max\n      };\n      setDailyWeatherList(prevDailyWeathers => {\n        const updated = [...prevDailyWeathers, dailyWeather];\n        return updated;\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: params.dayId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: params.cityId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DailyWeather, \"oVl/CosACDqoQXSsHMBk26cu/Mw=\", false, function () {\n  return [useParams];\n});\n\n_c = DailyWeather;\nexport default DailyWeather;\n\nvar _c;\n\n$RefreshReg$(_c, \"DailyWeather\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/DailyWeather/DailyWeather.js"],"names":["react","useEffect","useParams","DailyWeather","props","params","fetchData","response","fetch","cityId","data","json","console","log","i","data_time","list","dt_txt","split","month","getMonth","date","Date","day","getDay","daysName","dailyWeather","dayName","icon","weather","minTemp","main","temp_min","maxTemp","temp_max","setDailyWeatherList","prevDailyWeathers","updated","dayId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,cAA1B;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE5B,QAAMC,MAAM,GAAGH,SAAS,EAAxB;;AAEA,QAAMI,SAAS,GAAK,YAAY;AAC5B,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,sDAAqDH,MAAM,CAACI,MAAO,sDAArE,CAA5B;AACA,UAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAGA;AACR;AACA;AACA;AACA;AACA;;AAGQ,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAE,EAAnB,EAAuBA,CAAC,GAACA,CAAC,GAAC,CAA3B,EAA8B;AAE1B,UAAIC,SAAS,GAAGL,IAAI,CAACM,IAAL,CAAUF,CAAV,EAAaG,MAAb,CAAoBC,KAApB,CAA0B,GAA1B,EAA+B,CAA/B,EAAkCA,KAAlC,CAAwC,GAAxC,CAAhB;AAEA,UAAIC,KAAK,GAAGC,QAAQ,CAACL,SAAS,CAAC,CAAD,CAAV,CAApB;AACA,UAAIM,IAAI,GAAG,IAAIC,IAAJ,CAASP,SAAS,CAAC,CAAD,CAAT,GAAaI,KAAb,GAAmBJ,SAAS,CAAC,CAAD,CAArC,CAAX;AACA,UAAIQ,GAAG,GAAGF,IAAI,CAACG,MAAL,EAAV;AACA,UAAIC,QAAQ,GAAG,CAAC,KAAD,EAAO,KAAP,EAAa,KAAb,EAAmB,KAAnB,EAAyB,KAAzB,EAA+B,KAA/B,EAAqC,KAArC,CAAf;AAGA,YAAMC,YAAY,GAAG;AACjBC,QAAAA,OAAO,EAAGF,QAAQ,CAACF,GAAD,CADD;AAEjB;AACAK,QAAAA,IAAI,eAAG;AAAK,UAAA,GAAG,EAAG,mCAAkClB,IAAI,CAACM,IAAL,CAAUF,CAAV,EAAae,OAAb,CAAqB,CAArB,EAAwBD,IAAK;AAA1E;AAAA;AAAA;AAAA;AAAA,gBAHU;AAIjBE,QAAAA,OAAO,EAAGpB,IAAI,CAACM,IAAL,CAAUF,CAAV,EAAaiB,IAAb,CAAkBC,QAJX;AAKjBC,QAAAA,OAAO,EAAGvB,IAAI,CAACM,IAAL,CAAUF,CAAV,EAAaiB,IAAb,CAAkBG;AALX,OAArB;AASAC,MAAAA,mBAAmB,CAAEC,iBAAD,IAAuB;AACvC,cAAMC,OAAO,GAAG,CAAC,GAAGD,iBAAJ,EAAsBV,YAAtB,CAAhB;AACA,eAAOW,OAAP;AACH,OAHkB,CAAnB;AAIH;AAEJ,GAvCD;;AAyCApC,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAA,4BACI;AAAA,gBAAMD,MAAM,CAACiC;AAAb;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAMjC,MAAM,CAACI;AAAb;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAzDD;;GAAMN,Y;UAEaD,S;;;KAFbC,Y;AA2DN,eAAeA,YAAf","sourcesContent":["import react , {useEffect} from \"react\";\nimport { useParams } from \"react-router\";\n\nconst DailyWeather = (props) => {\n\n    const params = useParams();\n\n    const fetchData = ( async () => {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${params.cityId}&units=metric&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n        const data = await response.json();\n        console.log(data);\n\n\n        /*const dailyData = data.list.filter(reading => {   \n            return reading.dt_txt.includes(\"18:00:00\")\n            }\n          )\n        console.log(\"ovo je filtrirano\");\n        console.log(dailyData);*/\n\n\n        for (let i = 0; i <40; i=i+8) {\n\n            let data_time = data.list[i].dt_txt.split(\" \")[0].split(\"-\");\n\n            let month = getMonth(data_time[1]);\n            var date = new Date(data_time[2]+month+data_time[0]);\n            var day = date.getDay();\n            var daysName = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\n            \n          \n            const dailyWeather = {\n                dayName : daysName[day],\n                //icon : \"data.list[i].weather[0].id\",\n                icon : <img src={`http://openweathermap.org/img/w/${data.list[i].weather[0].icon}.png`}/>,\n                minTemp : data.list[i].main.temp_min,\n                maxTemp : data.list[i].main.temp_max,\n\n            }\n\n            setDailyWeatherList((prevDailyWeathers) => {\n                const updated = [...prevDailyWeathers,dailyWeather];\n                return updated;\n            });\n        }\n\n    });\n\n    useEffect(() => {\n        fetchData();\n    }, []);  \n\n    return(\n        <div>\n            <div>{params.dayId}</div>\n            <div>{params.cityId}</div>\n        </div>\n    );\n\n\n}\n\nexport default DailyWeather;"]},"metadata":{},"sourceType":"module"}