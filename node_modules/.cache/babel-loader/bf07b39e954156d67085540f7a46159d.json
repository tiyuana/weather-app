{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [unit, setUnit] = useState(\"metric\");\n  const [enteredCity, setEnteredCity] = useState(\"\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState();\n  let [loading, setLoading] = useState();\n  const [cityList, setCities] = useState([]); //prvi pokusaj\n\n  /*const mounted = useRef(false);\n   useEffect(() => {\n      mounted.current = true;\n       return () => {\n          mounted.current = false;\n      };\n  }, []);*/\n  //drugi pokusaj\n\n  /*const useIsMounted = () => {\n      const isMounted = useRef(false);\n      useEffect(() => {\n        isMounted.current = true;\n        return () => (isMounted.current = false);\n      }, []);\n      return isMounted;\n    };\n   const isMounted = useIsMounted();\n   useEffect(() => {\n      if (isMounted.current) {\n          setCities(cityList);\n      }\n  }, [isMounted]);*/\n\n  /*const updateCityList = (responseCity) => {\n      console.log(\"cityList \");\n      console.log(cityList);\n      console.log(\"response city \")\n      console.log(responseCity)\n       setCities((prevCities) => {\n          const updated = [...prevCities,responseCity];\n          console.log(\"updejtana\");\n          console.log(updated);\n          return updated;\n      });\n       console.log(\"cityList \");\n      console.log(cityList);\n   }\n   async function fetchForecastJSON() {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n      // waits until the request completes...\n      const conditions = await response.json();\n      console.log(\"response bez json\");\n      console.log(response);\n      return conditions;\n  }\n  //nacin3\n  const getForecast = (e) => {\n      if(e){\n          e.preventDefault();\n      }\n      console.log(\"daj prognozu!\");\n       if(enteredCity.trim().length === 0){\n          console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n          return setError(true);\n      }\n      //clear states for new data\n      setError(false);\n      setLoading(true);\n       fetchForecastJSON()\n      .then(response => {\n          console.log(\"response sa json = \");\n          console.log(response);\n          if(response.cod !== 200){\n              setResponseObj(response)\n              throw new Error()\n          }\n           setResponseObj(response)\n          setLoading(false);\n           const responseCity = {\n              key : enteredCity,\n              response : response,\n              error : error,\n              loading : loading\n          }\n          \n          \n          updateCityList(responseCity);\n          setLoading(false);\n               \n      })\n      .catch(error => {\n          setError(true);\n          setLoading(false);\n           console.log(error.message);\n          console.log(\"uhvatio sam error!\");\n      })\n  }*/\n\n  const ifExist = enteredCity => {\n    console.log(\"provjeri postojanje grada \" + enteredCity);\n\n    for (let city in cityList) {\n      console.log(\"provjeravam grad \");\n      console.log(cityList[city].key);\n\n      if (enteredCity === cityList[city].key) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const getForecast = useCallback(async e => {\n    if (e) {\n      e.preventDefault();\n    }\n\n    console.log(\"entered city\");\n    console.log(enteredCity); //clear states for new data\n\n    setError(false);\n    setLoading(true);\n\n    try {\n      if (cityList.length === 10) {\n        throw new Error(\"Max 10 cities allowed!\");\n      }\n\n      if (enteredCity.trim().length === 0) {\n        throw new Error('Input is empty - try again!');\n      }\n\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n\n      if (!response.ok) {\n        console.log(\"response bez json\");\n        console.log(response);\n        throw new Error(\"Please enter valid city\");\n      }\n\n      console.log(\"provjeravam je li ima dupli grad\");\n\n      if (ifExist(enteredCity.trim())) {\n        throw new Error('City is already listed!');\n      } else {\n        // waits until the request completes...\n        const data = await response.json();\n        setResponseObj(data);\n        setLoading(false);\n        const responseCity = {\n          key: enteredCity.trim(),\n          responseObj: data,\n          error: false,\n          loading: loading\n        }; //console.log(\"cityList \");\n        //console.log(cityList);\n        //console.log(\"response city \")\n        //console.log(responseCity)\n\n        setCities(prevCities => {\n          const updated = [...prevCities, responseCity];\n          return updated;\n        }); //console.log(\"cityList \");\n        //console.log(cityList);  \n      }\n    } catch (error) {\n      setError(error.message);\n      console.log(\"error message\"); //console.log(error);\n    }\n\n    setLoading(false);\n  });\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 19\n  }, this);\n\n  let errorContent = /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 206,\n    columnNumber: 24\n  }, this);\n\n  if (cityList.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(ForecastList, {\n      cities: cityList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 19\n    }, this);\n    console.log(cityList);\n  }\n\n  if (error) {\n    errorContent = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.Small,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 24\n    }, this);\n  }\n\n  if (loading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: enteredCity,\n        onChange: e => setEnteredCity(e.target.value),\n        className: styles.TextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 21\n        }, this), \"Celsius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 12\n    }, this), error && errorContent, /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"CaF5+RXOw8S5RDLJRGDq05CAgRI=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js"],"names":["React","useState","useEffect","useCallback","useRef","styles","ForecastList","Forecast","unit","setUnit","enteredCity","setEnteredCity","responseObj","setResponseObj","error","setError","loading","setLoading","cityList","setCities","ifExist","console","log","city","key","getForecast","e","preventDefault","length","Error","trim","response","fetch","ok","data","json","responseCity","prevCities","updated","message","content","errorContent","Small","target","value","TextInput","Radio","Button"],"mappings":"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","sourcesContent":["import React , {useState, useEffect, useCallback,useRef} from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\n\n\nconst Forecast = () => {\n\n    const [unit,setUnit] = useState(\"metric\");\n    const [enteredCity, setEnteredCity] = useState(\"\");\n    let [responseObj, setResponseObj] = useState({});\n\n    let [error, setError] = useState();\n    let [loading, setLoading] = useState();\n    const [cityList, setCities] = useState([]);\n\n    //prvi pokusaj\n    /*const mounted = useRef(false);\n\n    useEffect(() => {\n        mounted.current = true;\n\n        return () => {\n            mounted.current = false;\n        };\n    }, []);*/\n\n    //drugi pokusaj\n    /*const useIsMounted = () => {\n        const isMounted = useRef(false);\n        useEffect(() => {\n          isMounted.current = true;\n          return () => (isMounted.current = false);\n        }, []);\n        return isMounted;\n      };\n\n    const isMounted = useIsMounted();\n\n    useEffect(() => {\n        if (isMounted.current) {\n            setCities(cityList);\n        }\n    }, [isMounted]);*/\n\n    \n\n    /*const updateCityList = (responseCity) => {\n        console.log(\"cityList \");\n        console.log(cityList);\n        console.log(\"response city \")\n        console.log(responseCity)\n\n        setCities((prevCities) => {\n            const updated = [...prevCities,responseCity];\n            console.log(\"updejtana\");\n            console.log(updated);\n            return updated;\n        });\n\n        console.log(\"cityList \");\n        console.log(cityList);\n\n    }\n\n    async function fetchForecastJSON() {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n        // waits until the request completes...\n        const conditions = await response.json();\n        console.log(\"response bez json\");\n        console.log(response);\n        return conditions;\n    }\n    //nacin3\n    const getForecast = (e) => {\n        if(e){\n            e.preventDefault();\n        }\n        console.log(\"daj prognozu!\");\n\n        if(enteredCity.trim().length === 0){\n            console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n            return setError(true);\n        }\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        fetchForecastJSON()\n        .then(response => {\n            console.log(\"response sa json = \");\n            console.log(response);\n            if(response.cod !== 200){\n                setResponseObj(response)\n                throw new Error()\n            }\n\n            setResponseObj(response)\n            setLoading(false);\n\n            const responseCity = {\n                key : enteredCity,\n                response : response,\n                error : error,\n                loading : loading\n            }\n            \n            \n            updateCityList(responseCity);\n            setLoading(false);\n\n                \n        })\n        .catch(error => {\n            setError(true);\n            setLoading(false);\n\n            console.log(error.message);\n            console.log(\"uhvatio sam error!\");\n        })\n    }*/\n\n    const ifExist = (enteredCity) => {\n        console.log(\"provjeri postojanje grada \"+enteredCity);\n        for(let city in cityList){\n            console.log(\"provjeravam grad \");\n            console.log(cityList[city].key);\n            if (enteredCity === cityList[city].key){\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const getForecast = useCallback(async (e) => {\n        if(e){\n            e.preventDefault();\n        }\n        console.log(\"entered city\");\n        console.log(enteredCity);\n\n\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        try{\n            if (cityList.length === 10) {\n                throw new Error(\"Max 10 cities allowed!\");\n            }\n\n            if(enteredCity.trim().length === 0){\n                throw new Error('Input is empty - try again!');\n            }\n\n\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n            if (!response.ok) {\n                console.log(\"response bez json\");\n                console.log(response);\n                throw new Error(\"Please enter valid city\");\n            }\n            console.log(\"provjeravam je li ima dupli grad\");\n            if (ifExist(enteredCity.trim())){\n                throw new Error('City is already listed!');\n            }\n\n            \n            else {\n                \n                // waits until the request completes...\n                const data = await response.json();\n\n                setResponseObj(data);\n                setLoading(false);\n\n                const responseCity = {\n                    key : enteredCity.trim(),\n                    responseObj : data,\n                    error : false,\n                    loading : loading\n                }\n\n                //console.log(\"cityList \");\n                //console.log(cityList);\n                //console.log(\"response city \")\n                //console.log(responseCity)\n                \n                setCities((prevCities) => {\n                    const updated = [...prevCities,responseCity];\n                    return updated;\n                });\n                //console.log(\"cityList \");\n                //console.log(cityList);  \n            }\n            \n        } catch (error) {\n            setError(error.message);\n            console.log(\"error message\");\n            //console.log(error);\n        }\n        setLoading(false);\n    \n    });\n\n    let content = <p></p>;\n    let errorContent = <p></p>;\n\n    if (cityList.length > 0) {\n        content = <ForecastList cities={cityList} />;\n        console.log(cityList);\n    }\n\n    if (error) {\n        errorContent = <p className={styles.Small}>{error}</p>;\n    }\n\n    if (loading) {\n        content = <p>Loading...</p>;\n    }\n        \n\n    return(\n        <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={enteredCity}\n                    onChange={(e) => setEnteredCity(e.target.value)}\n                    className={styles.TextInput}\n                    />\n\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celsius\n                </label>\n                <button className={styles.Button} type=\"submit\">Get Forecast</button>\n            </form>\n            {error && errorContent}\n            <section>{content}</section>\n        </div>\n    );\n\n}\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}