{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [unit, setUnit] = useState(\"metric\");\n  const [enteredCity, setEnteredCity] = useState(\"\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const [cityList, setCities] = useState([]);\n  const mounted = useRef(false);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  const updateCityList = responseCity => {\n    console.log(\"cityList \");\n    console.log(cityList);\n    console.log(\"response city \");\n    console.log(responseCity);\n    setCities(prevCities => {\n      const updated = [...prevCities, responseCity];\n      console.log(\"updejtana\");\n      console.log(updated);\n      return updated;\n    });\n    console.log(\"cityList \");\n    console.log(cityList);\n  };\n\n  async function fetchForecastJSON() {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`); // waits until the request completes...\n\n    const conditions = await response.json();\n    console.log(\"response bez json\");\n    console.log(response);\n    return conditions;\n  } //nacin3\n\n\n  const getForecast = e => {\n    if (e) {\n      e.preventDefault();\n    }\n\n    console.log(\"daj prognozu!\");\n\n    if (enteredCity.trim().length === 0) {\n      console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n      return setError(true);\n    } //clear states for new data\n\n\n    setError(false);\n    setLoading(true);\n    fetchForecastJSON().then(response => {\n      console.log(\"response sa json = \");\n      console.log(response);\n\n      if (response.cod !== 200) {\n        setResponseObj(response);\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n      const responseCity = {\n        key: enteredCity,\n        response: response,\n        error: error,\n        loading: loading\n      };\n      updateCityList(responseCity);\n      setLoading(false);\n    }).catch(error => {\n      setError(true);\n      setLoading(false);\n      console.log(error.message);\n      console.log(\"uhvatio sam error!\");\n    });\n  };\n  /*useEffect(()=> {\n      getForecast()\n  },[getForecast]);*/\n\n  /*const getForecast = useCallback(async (e) => {\n      e.preventDefault();\n       //clear states for new data\n      setError(false);\n      setLoading(true);\n       if(enteredCity.trim().length === 0){\n          console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n          return setError(true);\n      }\n      try{\n          const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n          if (!response.ok) {\n              throw new Error('Something went wrong!');\n          }\n          console.log(\"response bez json\");\n          console.log(response);\n           // waits until the request completes...\n          const data = await response.json();\n          console.log(\"response sa json\");\n          console.log(data);\n           setResponseObj(data);\n          setLoading(false);\n           const responseCity = {\n              key : enteredCity,\n              response : data,\n              error : error,\n              loading : loading\n          }\n           console.log(\"cityList \");\n          console.log(cityList);\n          console.log(\"response city \")\n          console.log(responseCity)\n  */\n\n  /*if (mounted.current){\n      setCities((prevCities) => {\n          const updated = [...prevCities,responseCity];\n          console.log(\"updejtana\");\n          console.log(updated);\n          return updated;\n      });\n      console.log(\"cityList \");\n      console.log(cityList);    \n  }*/\n\n  /*setCities((prevCities) => {\n      const updated = [...prevCities,responseCity];\n      console.log(\"updejtana\");\n      console.log(updated);\n      return updated;\n  });\n  console.log(\"cityList \");\n  console.log(cityList);    \n  \n  \n  } catch (error) {\n  setError(true);\n  }\n  setLoading(false)\n  }) */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: enteredCity,\n        onChange: e => setEnteredCity(e.target.value),\n        className: styles.TextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), \"Celsius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 12\n    }, this), !loading && cityList.length > 0 && /*#__PURE__*/_jsxDEV(ForecastList, {\n      cities: cityList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 53\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"duljina cityList = \", cityList.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 18\n    }, this), !loading && cityList.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"ispi\\u0161i\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 53\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"IFVp9Fzk/+ISz1BotKfHHwwAk6k=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js"],"names":["React","useState","useEffect","useCallback","useRef","styles","ForecastList","Forecast","unit","setUnit","enteredCity","setEnteredCity","responseObj","setResponseObj","error","setError","loading","setLoading","cityList","setCities","mounted","current","updateCityList","responseCity","console","log","prevCities","updated","fetchForecastJSON","response","fetch","conditions","json","getForecast","e","preventDefault","trim","length","then","cod","Error","key","catch","message","target","value","TextInput","Radio","Button"],"mappings":"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","sourcesContent":["import React , {useState, useEffect, useCallback,useRef} from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\n\n\nconst Forecast = () => {\n\n    const [unit,setUnit] = useState(\"metric\");\n    const [enteredCity, setEnteredCity] = useState(\"\");\n    let [responseObj, setResponseObj] = useState({});\n\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    const [cityList, setCities] = useState([]);\n\n    const mounted = useRef(false);\n\n    useEffect(() => {\n        mounted.current = true;\n\n        return () => {\n            mounted.current = false;\n        };\n    }, []);\n    \n\n    const updateCityList = (responseCity) => {\n        console.log(\"cityList \");\n        console.log(cityList);\n        console.log(\"response city \")\n        console.log(responseCity)\n\n        setCities((prevCities) => {\n            const updated = [...prevCities,responseCity];\n            console.log(\"updejtana\");\n            console.log(updated);\n            return updated;\n        });\n\n        console.log(\"cityList \");\n        console.log(cityList);\n\n    }\n\n    async function fetchForecastJSON() {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n        // waits until the request completes...\n        const conditions = await response.json();\n        console.log(\"response bez json\");\n        console.log(response);\n        return conditions;\n    }\n    //nacin3\n    const getForecast = (e) => {\n        if(e){\n            e.preventDefault();\n        }\n        console.log(\"daj prognozu!\");\n\n        if(enteredCity.trim().length === 0){\n            console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n            return setError(true);\n        }\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        fetchForecastJSON()\n        .then(response => {\n            console.log(\"response sa json = \");\n            console.log(response);\n            if(response.cod !== 200){\n                setResponseObj(response)\n                throw new Error()\n            }\n\n            setResponseObj(response)\n            setLoading(false);\n\n            const responseCity = {\n                key : enteredCity,\n                response : response,\n                error : error,\n                loading : loading\n            }\n            \n            \n            updateCityList(responseCity);\n            setLoading(false);\n\n                \n        })\n        .catch(error => {\n            setError(true);\n            setLoading(false);\n\n            console.log(error.message);\n            console.log(\"uhvatio sam error!\");\n        })\n    }\n\n    /*useEffect(()=> {\n        getForecast()\n    },[getForecast]);*/\n    \n\n    /*const getForecast = useCallback(async (e) => {\n        e.preventDefault();\n\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        if(enteredCity.trim().length === 0){\n            console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n            return setError(true);\n        }\n        try{\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n            if (!response.ok) {\n                throw new Error('Something went wrong!');\n            }\n            console.log(\"response bez json\");\n            console.log(response);\n\n            // waits until the request completes...\n            const data = await response.json();\n            console.log(\"response sa json\");\n            console.log(data);\n\n            setResponseObj(data);\n            setLoading(false);\n\n            const responseCity = {\n                key : enteredCity,\n                response : data,\n                error : error,\n                loading : loading\n            }\n\n            console.log(\"cityList \");\n            console.log(cityList);\n            console.log(\"response city \")\n            console.log(responseCity)\n*/\n            /*if (mounted.current){\n                setCities((prevCities) => {\n                    const updated = [...prevCities,responseCity];\n                    console.log(\"updejtana\");\n                    console.log(updated);\n                    return updated;\n                });\n                console.log(\"cityList \");\n                console.log(cityList);    \n            }*/\n            \n            /*setCities((prevCities) => {\n                const updated = [...prevCities,responseCity];\n                console.log(\"updejtana\");\n                console.log(updated);\n                return updated;\n            });\n            console.log(\"cityList \");\n            console.log(cityList);    \n            \n            \n        } catch (error) {\n            setError(true);\n        }\n\n        setLoading(false)\n    \n    }) */\n        \n    \n    return(\n        <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={enteredCity}\n                    onChange={(e) => setEnteredCity(e.target.value)}\n                    className={styles.TextInput}\n                    />\n\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celsius\n                </label>\n                <button className={styles.Button} type=\"submit\">Get Forecast</button>\n            </form>\n                {!loading && cityList.length > 0 && <ForecastList cities={cityList}/>}\n                {<p>duljina cityList = {cityList.length}</p>}\n                {!loading && cityList.length > 0 && <div>ispiši</div>}\n                {loading && <p>Loading...</p>}\n        </div>\n    );\n\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}