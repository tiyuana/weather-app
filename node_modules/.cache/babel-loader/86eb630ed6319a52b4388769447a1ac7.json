{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/Login/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport Card from '../UI/Card';\nimport styles from \"./Login.module.css\";\nimport ErrorModal from '../UI/ErrorModal';\nimport AuthContext from '../../store/auth-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = props => {\n  _s();\n\n  const history = useHistory();\n  const emailRef = useRef();\n  const passwordRef = useRef();\n  const [error, setError] = useState();\n  const authCtx = useContext(AuthContext);\n\n  const loginHandler = event => {\n    event.preventDefault();\n\n    if (emailRef.current.value.trim().length === 0 || passwordRef.current.value.trim().length === 0) {\n      setError({\n        title: \"Invalid email or password\",\n        message: \"Try again - non empty\"\n      });\n      return;\n    }\n\n    if (!emailRef.current.value.trim().includes('@')) {\n      setError({\n        title: \"Invalid email\",\n        message: \"Try again - email must contain @\"\n      });\n      return;\n    } //mozes kasnije sve if za password staviti skupa kao jednu provjeru.\n\n\n    if (passwordRef.current.value.trim().length < 8) {\n      setError({\n        title: \"Invalid password\",\n        message: \"Try again - password must contain at least 8 characters\"\n      });\n      return;\n    }\n\n    if (passwordRef.current.value.search(/[A-Z]/) === -1) {\n      setError({\n        title: \"Invalid password\",\n        message: \"Try again - password must contain at least one uppercase letter\"\n      });\n      return;\n    }\n\n    if (passwordRef.current.value.search(/[0-9]/) === -1) {\n      setError({\n        title: \"Invalid password\",\n        message: \"Try again - password must contain at least one number\"\n      });\n      return;\n    }\n\n    if (passwordRef.current.value.search(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/) === -1) {\n      setError({\n        title: \"Invalid password\",\n        message: \"Try again - password must contain one special character\"\n      });\n      return;\n    }\n\n    const enteredUser = {\n      email: emailRef.current.value,\n      password: passwordRef.current.value\n    }; //SADA BI TREBALA PROVJERITI POSTOJI LI U BAZI PODATAKA OVAKAV USER +AUTENTIFIKACIJA\n    //BACKEND BI MI ONDA VRATIO TOKEN KOJI FRONT SPREMA U LOCAL STORAGE\n    //var today = new Date();\n    //const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n    //const date = formatDate(new Date());\n\n    const date = props.getDate(new Date());\n    const token = enteredUser.email + date;\n    console.log(\"in Login.js Token = \" + token);\n    console.log(\"ispravni su svi podaci!\");\n    authCtx.login(token);\n    localStorage.setItem(\"token\", token);\n    console.log(\"spremio sam token!! valjda\");\n    props.onLogin(token);\n    emailRef.current.value = '';\n    passwordRef.current.value = '';\n    console.log(\"sada idemo na weather, trebali bi\");\n    history.replace(\"/weather\");\n  };\n\n  const confirmHandler = () => {\n    setError(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(ErrorModal, {\n      title: error.title,\n      message: error.message,\n      onConfirm: confirmHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      className: styles.input,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: loginHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"email\",\n          type: \"text\",\n          ref: emailRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"password\",\n          type: \"text\",\n          ref: passwordRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: styles.button,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"C/WjhjaYo/TlTTo+p3f4XQI/C6Q=\", false, function () {\n  return [useHistory];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/Login/Login.js"],"names":["React","useState","useRef","useContext","useHistory","Card","styles","ErrorModal","AuthContext","Login","props","history","emailRef","passwordRef","error","setError","authCtx","loginHandler","event","preventDefault","current","value","trim","length","title","message","includes","search","enteredUser","email","password","date","getDate","Date","token","console","log","login","localStorage","setItem","onLogin","replace","confirmHandler","input","button"],"mappings":"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","sourcesContent":["import React , {useState , useRef, useContext} from 'react';\nimport { useHistory } from 'react-router';\nimport Card from '../UI/Card';\nimport styles from \"./Login.module.css\";\nimport ErrorModal from '../UI/ErrorModal';\nimport AuthContext from '../../store/auth-context';\n\nconst Login = (props) => {\n\n    const history = useHistory();\n\n    const emailRef = useRef();\n    const passwordRef = useRef();\n\n    const [error, setError] = useState();\n    const authCtx = useContext(AuthContext);\n\n\n\n    const loginHandler = (event) => {\n\n        event.preventDefault();\n\n        if(emailRef.current.value.trim().length === 0|| passwordRef.current.value.trim().length === 0){\n            setError({\n                title : \"Invalid email or password\",\n                message : \"Try again - non empty\"\n            })\n            return;\n        }\n\n        if(!emailRef.current.value.trim().includes('@')){\n            setError({\n                title : \"Invalid email\",\n                message : \"Try again - email must contain @\"\n            })\n            return;\n        }\n        //mozes kasnije sve if za password staviti skupa kao jednu provjeru.\n        if(passwordRef.current.value.trim().length < 8){\n            setError({\n                title : \"Invalid password\",\n                message : \"Try again - password must contain at least 8 characters\"\n            })\n            return;\n        }\n\n        if (passwordRef.current.value.search(/[A-Z]/) === -1){\n            setError({\n                title : \"Invalid password\",\n                message : \"Try again - password must contain at least one uppercase letter\"\n            })\n            return;\n        }\n        if (passwordRef.current.value.search(/[0-9]/) === -1){\n            setError({\n                title : \"Invalid password\",\n                message : \"Try again - password must contain at least one number\"\n            })\n            return;\n        }\n        if (passwordRef.current.value.search(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/) === -1){\n            setError({\n                title : \"Invalid password\",\n                message : \"Try again - password must contain one special character\"\n            })\n            return;\n        }\n\n        const enteredUser = {\n            email : emailRef.current.value,\n            password : passwordRef.current.value\n        };\n\n        //SADA BI TREBALA PROVJERITI POSTOJI LI U BAZI PODATAKA OVAKAV USER +AUTENTIFIKACIJA\n        //BACKEND BI MI ONDA VRATIO TOKEN KOJI FRONT SPREMA U LOCAL STORAGE\n\n        //var today = new Date();\n        //const date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();\n\n        //const date = formatDate(new Date());\n        const date = props.getDate(new Date());\n\n\n        const token = enteredUser.email + date;\n        console.log(\"in Login.js Token = \"+token);\n        console.log(\"ispravni su svi podaci!\");\n\n        authCtx.login(token);\n        localStorage.setItem(\"token\", token);\n        console.log(\"spremio sam token!! valjda\")\n\n        props.onLogin(token);\n        emailRef.current.value = '';\n        passwordRef.current.value = '';\n        console.log(\"sada idemo na weather, trebali bi\");\n        history.replace(\"/weather\");\n\n    }\n\n\n    const confirmHandler = () =>{\n        setError(null)\n    }\n\n\n    return (\n        <div>\n            {error && <ErrorModal title={error.title} message={error.message} onConfirm={confirmHandler}/>}\n            <Card className={styles.input}>\n                <form onSubmit={loginHandler}>\n                    <label htmlFor=\"email\">Email</label>\n                    <input id=\"email\" type=\"text\" ref={emailRef} ></input>\n                    <label htmlFor=\"password\" >Password</label>\n                    <input id=\"password\" type=\"text\" ref={passwordRef}></input>\n                    <button type=\"submit\" className={styles.button}>Login</button>\n                </form>\n            </Card>\n        </div>\n    );\n}\n\nexport default Login;"]},"metadata":{},"sourceType":"module"}