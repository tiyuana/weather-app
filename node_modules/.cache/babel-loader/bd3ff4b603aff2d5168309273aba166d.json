{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/FiveDayForecast.js\",\n    _s = $RefreshSig$();\n\nimport react, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport TableForecast from \"./TableForecast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FiveDayForecast = props => {\n  _s();\n\n  const [data, setData] = useState();\n  const [dailyWeatherList, setDailyWeatherList] = useState([]);\n  const params = useParams();\n\n  const getMonth = m => {\n    if (m === \"01\") return \"Jan\";else if (m === \"02\") return \"Feb\";else if (m === \"03\") return \"Mar\";else if (m === \"04\") return \"Apr\";else if (m === \"05\") return \"May\";else if (m === \"06\") return \"Jun\";else if (m === \"07\") return \"Jul\";else if (m === \"08\") return \"Aug\";else if (m === \"09\") return \"Sep\";else if (m === \"10\") return \"Oct\";else if (m === \"11\") return \"Nov\";else if (m === \"12\") return \"Dec\";\n    return \"njemaaa\";\n  };\n\n  const fetchData = async () => {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${params.cityId}&units=metric&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n    const data = await response.json();\n    console.log(data);\n    setData(data); //-----------------------------------------\n\n    console.log(\"datum je \");\n    let d = data.list[0].dt_txt.split(\" \")[0].split(\"-\");\n    console.log(d);\n    let month = getMonth(d[1]);\n    console.log(month);\n    var date = new Date(d[2] + month + d[0]);\n    var day = date.getDay();\n    var daysName = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    console.log(daysName[day]);\n    console.log(\"max temp je\");\n    console.log(data.list[0].main.temp_max);\n    console.log(\"min temp je \");\n    console.log(data.list[0].main.temp_min);\n    const dailyWeather = {\n      dayName: daysName[day],\n      icon: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `http://openweathermap.org/img/w/${data.list[0].weather[0].icon}.png`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 20\n      }, this),\n      minTemp: data.list[0].main.temp_min,\n      maxTemp: data.list[0].main.temp_max\n    };\n    setDailyWeatherList(prevDailyWeathers => {\n      const updated = [...prevDailyWeathers, dailyWeather];\n      return updated;\n    }); //sada podatke stavi u objekt(podatke za 1 dan)\n    //onda ih mozes staviti u listu\n    //i iz te liste dolje ocitavat u neku drugu komponentu koja ce primati gore objekt i fino ih prikazivati\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Nema nista\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 19\n  }, this);\n\n  if (data) {\n    content = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `http://openweathermap.org/img/w/${data.list[0].weather[0].icon}.png`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Ovo je petodnevna prognoza\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TableForecast, {\n      fiveDays: dailyWeatherList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FiveDayForecast, \"NBdAywS9GhYDaE93GGS33nMNRIY=\", false, function () {\n  return [useParams];\n});\n\n_c = FiveDayForecast;\nexport default FiveDayForecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"FiveDayForecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/FiveDayForecast.js"],"names":["react","useEffect","useState","useParams","TableForecast","FiveDayForecast","props","data","setData","dailyWeatherList","setDailyWeatherList","params","getMonth","m","fetchData","response","fetch","cityId","json","console","log","d","list","dt_txt","split","month","date","Date","day","getDay","daysName","main","temp_max","temp_min","dailyWeather","dayName","icon","weather","minTemp","maxTemp","prevDailyWeathers","updated","content"],"mappings":"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","sourcesContent":["import react , {useEffect , useState} from \"react\";\nimport { useParams } from \"react-router\";\nimport TableForecast from \"./TableForecast\";\n\nconst FiveDayForecast = (props) => {\n\n    const [data,setData] = useState();\n    const [dailyWeatherList, setDailyWeatherList] = useState([]);\n    const params = useParams();\n\n    const getMonth = (m) => {\n        if (m===\"01\") return \"Jan\"\n        else if (m===\"02\") return \"Feb\"\n        else if (m===\"03\") return \"Mar\"\n        else if (m===\"04\") return \"Apr\"\n        else if (m===\"05\") return \"May\"\n        else if (m===\"06\") return \"Jun\"\n        else if (m===\"07\") return \"Jul\"\n        else if (m===\"08\") return \"Aug\"\n        else if (m===\"09\") return \"Sep\"\n        else if (m===\"10\") return \"Oct\"\n        else if (m===\"11\") return \"Nov\"\n        else if (m===\"12\") return \"Dec\"\n        return \"njemaaa\";\n    }\n\n    const fetchData = ( async () => {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${params.cityId}&units=metric&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n        const data = await response.json();\n        console.log(data); \n        setData(data);\n        //-----------------------------------------\n        console.log(\"datum je \");\n        let d = data.list[0].dt_txt.split(\" \")[0].split(\"-\");\n        console.log(d);\n\n        let month = getMonth(d[1]);\n        console.log(month)\n        var date = new Date(d[2]+month+d[0]);\n        var day = date.getDay();\n        var daysName = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];\n        console.log(daysName[day]);\n\n\n        console.log(\"max temp je\");\n        console.log(data.list[0].main.temp_max);\n        console.log(\"min temp je \");\n        console.log(data.list[0].main.temp_min);\n\n        const dailyWeather = {\n            dayName : daysName[day],\n            icon : <img src={`http://openweathermap.org/img/w/${data.list[0].weather[0].icon}.png`}/>,\n            minTemp : data.list[0].main.temp_min,\n            maxTemp : data.list[0].main.temp_max,\n\n        }\n\n        setDailyWeatherList((prevDailyWeathers) => {\n            const updated = [...prevDailyWeathers,dailyWeather];\n            return updated;\n        });\n\n        //sada podatke stavi u objekt(podatke za 1 dan)\n        //onda ih mozes staviti u listu\n        //i iz te liste dolje ocitavat u neku drugu komponentu koja ce primati gore objekt i fino ih prikazivati\n\n    });\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    let content = <p>Nema nista</p>;\n\n    if (data) {\n        \n        content = <img src={`http://openweathermap.org/img/w/${data.list[0].weather[0].icon}.png`}/>\n\n      \n    }\n    \n\n    return(\n        <div>\n            <div>Ovo je petodnevna prognoza</div>\n            <section>{content}</section>\n            <TableForecast fiveDays={dailyWeatherList} />\n        </div>\n    );\n}\n\nexport default FiveDayForecast;"]},"metadata":{},"sourceType":"module"}