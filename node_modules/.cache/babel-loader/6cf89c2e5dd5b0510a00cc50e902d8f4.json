{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport { Link } from 'react-router-dom';\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const history = useHistory();\n  const [unit, setUnit] = useState(\"metric\");\n  const [enteredCity, setEnteredCity] = useState(\"\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const [cityList, setCities] = useState([]);\n  const [favorites, setFavorites] = useState([]);\n\n  const deleteCityHandler = cityName => {\n    console.log(\"in forecast.js ovo je cityname= \" + cityName);\n    setError(false);\n    let updatedCities;\n    updatedCities = cityList.filter(item => item.responseObj.name !== cityName);\n    setCities(updatedCities);\n  };\n  /*const ifExist = (enteredCity) => {\n      console.log(\"provjeri postojanje grada \"+enteredCity);\n      for(var city in cityList){\n          console.log(\"provjeravam grad \");\n          console.log(cityList[city]);\n          if (enteredCity === cityList[city].key){\n              return true;\n          }\n      }\n      return false;\n  };*/\n\n\n  const ifExist = (item, itemList) => {\n    console.log(\"provjeri postojanje grada \" + item);\n\n    for (var it in itemList) {\n      console.log(\"provjeravam grad \");\n      console.log(itemList[it].name);\n\n      if (item === itemList[it].name) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  const addToFavoritesHandler = cityObject => {\n    console.log(\"in Forecast.js i want to add to favorites sljedeci objekt ->\");\n    console.log(cityObject);\n\n    if (ifExist(cityObject.name, favorites)) {\n      console.log(cityObject.name + \" je vec u listi!\");\n    } else {\n      setFavorites(prevFavorites => {\n        console.log(\"lista favorita u handleru\");\n        console.log(favorites);\n        const updatedFav = [...prevFavorites, cityObject];\n        console.log(favorites);\n        return updatedFav;\n      });\n    }\n  };\n\n  const getForecast = useCallback(async e => {\n    if (e) {\n      e.preventDefault();\n    } //clear states for new data\n\n\n    setError(false);\n    setLoading(true);\n\n    try {\n      if (cityList.length === 10) {\n        throw new Error(\"Max 10 cities allowed!\");\n      }\n\n      if (enteredCity.trim().length === 0) {\n        throw new Error('Input is empty - try again!');\n      }\n\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n\n      if (!response.ok) {\n        throw new Error(\"Please enter valid city\");\n      } else {\n        // waits until the request completes...\n        const data = await response.json();\n        setResponseObj(data);\n        setLoading(false);\n        console.log(\"provjeravam je li ima dupli grad\");\n\n        if (ifExist(data.name, cityList)) {\n          throw new Error('City is already listed!');\n        }\n\n        console.log(data);\n        const responseCity = {\n          key: data.name,\n          name: data.name,\n          responseObj: data,\n          icon: data.weather[0].icon,\n          error: false,\n          loading: loading\n        };\n        setCities(prevCities => {\n          const updated = [...prevCities, responseCity];\n          return updated;\n        });\n      }\n    } catch (error) {\n      setError(error.message);\n      console.log(\"error message\");\n    }\n\n    setLoading(false);\n  });\n\n  const onFavoritesHandler = () => {\n    console.log(\"GO TO FAVORITES AJMO\");\n    history.replace(\"/weather/favorites\");\n  };\n\n  let content = /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 19\n  }, this);\n\n  let errorContent = /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 24\n  }, this);\n\n  if (cityList.length > 0) {\n    content = /*#__PURE__*/_jsxDEV(ForecastList, {\n      cities: cityList,\n      onDelete: deleteCityHandler,\n      onAddToFavorites: addToFavoritesHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 19\n    }, this);\n    console.log(cityList);\n  }\n\n  if (error) {\n    errorContent = /*#__PURE__*/_jsxDEV(\"p\", {\n      className: styles.Small,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 24\n    }, this);\n  }\n\n  if (loading) {\n    content = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: enteredCity,\n        onChange: e => setEnteredCity(e.target.value),\n        className: styles.TextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), \"Celsius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: \"/weather/favorites\",\n        state: favorites\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        children: \"Go to favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 77\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), error && errorContent, /*#__PURE__*/_jsxDEV(\"section\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"JWWUo2rNF8UAs/aXCrsdK9gCPOY=\", false, function () {\n  return [useHistory];\n});\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js"],"names":["React","useState","useCallback","useEffect","styles","ForecastList","Link","useHistory","Forecast","history","unit","setUnit","enteredCity","setEnteredCity","responseObj","setResponseObj","error","setError","loading","setLoading","cityList","setCities","favorites","setFavorites","deleteCityHandler","cityName","console","log","updatedCities","filter","item","name","ifExist","itemList","it","addToFavoritesHandler","cityObject","prevFavorites","updatedFav","getForecast","e","preventDefault","length","Error","trim","response","fetch","ok","data","json","responseCity","key","icon","weather","prevCities","updated","message","onFavoritesHandler","replace","content","errorContent","Small","target","value","TextInput","Radio","Button","pathname","state"],"mappings":"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","sourcesContent":["import React , {useState, useCallback, useEffect} from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport {Link} from 'react-router-dom';\nimport { useHistory } from 'react-router';\n\n\nconst Forecast = () => {\n\n    const history = useHistory();\n\n    const [unit,setUnit] = useState(\"metric\");\n    const [enteredCity, setEnteredCity] = useState(\"\");\n    let [responseObj, setResponseObj] = useState({});\n\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    const [cityList, setCities] = useState([]);\n\n    const [favorites, setFavorites] = useState([]);\n\n\n    const deleteCityHandler = (cityName) => {\n        console.log(\"in forecast.js ovo je cityname= \"+cityName);\n        setError(false);\n        let updatedCities;\n\n        updatedCities = cityList.filter(item => item.responseObj.name !== cityName);\n        setCities(updatedCities);\n    }\n\n    \n\n\n    /*const ifExist = (enteredCity) => {\n        console.log(\"provjeri postojanje grada \"+enteredCity);\n        for(var city in cityList){\n            console.log(\"provjeravam grad \");\n            console.log(cityList[city]);\n            if (enteredCity === cityList[city].key){\n                return true;\n            }\n        }\n        return false;\n    };*/\n    const ifExist = (item, itemList) => {\n        console.log(\"provjeri postojanje grada \"+item);\n        for(var it in itemList){\n            console.log(\"provjeravam grad \");\n            console.log(itemList[it].name);\n            if (item === itemList[it].name){\n                return true;\n            }\n        }\n        return false;\n    };\n\n\n    const addToFavoritesHandler = (cityObject) => {\n        console.log(\"in Forecast.js i want to add to favorites sljedeci objekt ->\");\n        console.log(cityObject);\n\n        if (ifExist(cityObject.name, favorites)){        \n            console.log(cityObject.name + \" je vec u listi!\");\n        }\n        else{\n            setFavorites((prevFavorites) => {\n                console.log(\"lista favorita u handleru\")\n                console.log(favorites);\n                const updatedFav = [...prevFavorites,cityObject];\n                console.log(favorites);\n                return updatedFav;\n            });\n        }\n    }\n\n    const getForecast = useCallback(async (e) => {\n        if(e){\n            e.preventDefault();\n        }\n\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        try{\n            if (cityList.length === 10) {\n                throw new Error(\"Max 10 cities allowed!\");\n            }\n\n            if(enteredCity.trim().length === 0){\n                throw new Error('Input is empty - try again!');\n            }\n\n\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n            if (!response.ok) {\n                throw new Error(\"Please enter valid city\");\n            }\n\n            \n            else {\n                // waits until the request completes...\n                const data = await response.json();\n\n                setResponseObj(data);\n                setLoading(false);\n\n                console.log(\"provjeravam je li ima dupli grad\");\n                if (ifExist(data.name, cityList)){\n                    throw new Error('City is already listed!');\n                }\n                console.log(data);\n                const responseCity = {\n                    key : data.name,\n                    name : data.name,\n                    responseObj : data,\n                    icon : data.weather[0].icon,\n                    error : false,\n                    loading : loading\n                }\n                \n                setCities((prevCities) => {\n                    const updated = [...prevCities,responseCity];\n                    return updated;\n                });\n            }\n            \n        } catch (error) {\n            setError(error.message);\n            console.log(\"error message\");\n        }\n        setLoading(false);\n    \n    });\n\n    const onFavoritesHandler = () => {\n        console.log(\"GO TO FAVORITES AJMO\")\n        history.replace(\"/weather/favorites\");\n    };\n\n    let content = <p></p>;\n    let errorContent = <p></p>;\n\n    if (cityList.length > 0) {\n        content = <ForecastList cities={cityList} onDelete={deleteCityHandler} onAddToFavorites={addToFavoritesHandler}/>;\n        console.log(cityList);\n    }\n\n    if (error) {\n        errorContent = <p className={styles.Small}>{error}</p>;\n    }\n\n    if (loading) {\n        content = <p>Loading...</p>;\n    }\n        \n\n\n    return(\n        <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={enteredCity}\n                    onChange={(e) => setEnteredCity(e.target.value)}\n                    className={styles.TextInput}\n                    />\n\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celsius\n                </label>\n                <button className={styles.Button} type=\"submit\">Get Forecast</button>\n            </form>\n\n            <Link to={{ pathname: \"/weather/favorites\", state: favorites }}><button className={styles.Button}>Go to favorites</button></Link>\n            {error && errorContent}\n            <section>{content}</section>\n        </div>\n    );\n\n}\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}