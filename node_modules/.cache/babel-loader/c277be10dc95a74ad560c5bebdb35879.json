{"ast":null,"code":"var _jsxFileName = \"/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const [unit, setUnit] = useState(\"metric\");\n  const [enteredCity, setEnteredCity] = useState(\"\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const [cityList, setCities] = useState([]);\n\n  const updateCityList = responseCity => {\n    console.log(\"cityList \");\n    console.log(cityList);\n    console.log(\"response city \");\n    console.log(responseCity);\n    setCities(prevCities => {\n      const updated = [...prevCities, responseCity];\n      console.log(updated);\n      return updated;\n    });\n    /*const probna = [];\n    probna.push(responseCity);\n    setCities(probna);*/\n\n    console.log(\"cityList \");\n    console.log(cityList);\n  };\n\n  async function fetchForecastJSON() {\n    const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`); // waits until the request completes...\n\n    const conditions = await response.json();\n    console.log(\"response bez json\");\n    console.log(response);\n    return conditions;\n  } //nacin3\n\n\n  const getForecast = e => {\n    e.preventDefault();\n    console.log(\"daj prognozu!\");\n\n    if (enteredCity.trim().length === 0) {\n      console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n      return setError(true);\n    } //clear states for new data\n\n\n    setError(false);\n    setLoading(true);\n    fetchForecastJSON().then(response => {\n      console.log(\"response sa json = \");\n      console.log(response);\n\n      if (response.cod !== 200) {\n        setResponseObj(response);\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false); //console.log(\"evo citilist =\");\n      //console.log(cityList);\n\n      const responseCity = {\n        key: enteredCity,\n        response: response,\n        error: error,\n        loading: loading\n      };\n      /*const curentCities = [];\n      curentCities.push(responseCity);\n      setCities(curentCities);*/\n\n      updateCityList(responseCity);\n    }).catch(error => {\n      setError(true);\n      setLoading(false);\n      console.log(error.message);\n      console.log(\"uhvatio sam error!\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Find Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: getForecast,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter City\",\n        maxLength: \"50\",\n        value: enteredCity,\n        onChange: e => setEnteredCity(e.target.value),\n        className: styles.TextInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"imperial\",\n          value: \"imperial\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), \"Fahrenheit\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: styles.Radio,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: \"units\",\n          checked: unit === \"metric\",\n          value: \"metric\",\n          onChange: e => setUnit(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), \"Celsius\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.Button,\n        type: \"submit\",\n        children: \"Get Forecast\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"duljina cityList = \", cityList.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 18\n    }, this), !loading && cityList.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"ispi\\u0161i\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 53\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Forecast, \"PNaU8Q9XCfDb1/YV1Zjo/JsjV6A=\");\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/tihana/Documents/ag04/weather-app/weather-app/src/components/pages/Forecast/Forecast.js"],"names":["React","useState","useEffect","useCallback","styles","ForecastList","Forecast","unit","setUnit","enteredCity","setEnteredCity","responseObj","setResponseObj","error","setError","loading","setLoading","cityList","setCities","updateCityList","responseCity","console","log","prevCities","updated","fetchForecastJSON","response","fetch","conditions","json","getForecast","e","preventDefault","trim","length","then","cod","Error","key","catch","message","target","value","TextInput","Radio","Button"],"mappings":"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","sourcesContent":["import React , {useState, useEffect, useCallback} from 'react';\nimport styles from './Forecast.module.css';\nimport ForecastList from './ForecastList';\n\n\nconst Forecast = () => {\n\n    const [unit,setUnit] = useState(\"metric\");\n    const [enteredCity, setEnteredCity] = useState(\"\");\n    let [responseObj, setResponseObj] = useState({});\n\n    let [error, setError] = useState(false);\n    let [loading, setLoading] = useState(false);\n    const [cityList, setCities] = useState([]);\n    \n\n    const updateCityList = (responseCity) => {\n        console.log(\"cityList \");\n        console.log(cityList);\n        console.log(\"response city \")\n        console.log(responseCity)\n\n        setCities((prevCities) => {\n            const updated = [...prevCities,responseCity];\n            console.log(updated)\n            return updated\n          });\n        /*const probna = [];\n        probna.push(responseCity);\n        setCities(probna);*/\n\n        console.log(\"cityList \");\n        console.log(cityList);\n\n    }\n\n    async function fetchForecastJSON() {\n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${enteredCity}&units=${unit}&appid=5a4e05662564bdefbc9d1b3d65c255f0`);\n        // waits until the request completes...\n        const conditions = await response.json();\n        console.log(\"response bez json\");\n        console.log(response);\n        return conditions;\n    }\n    //nacin3\n    const getForecast = (e) => {\n        e.preventDefault();\n        console.log(\"daj prognozu!\");\n\n        if(enteredCity.trim().length === 0){\n            console.log(\"ERROR MODAL ILI SAMO ZACRVENI\");\n            return setError(true);\n        }\n        //clear states for new data\n        setError(false);\n        setLoading(true);\n\n        fetchForecastJSON()\n        .then(response => {\n            console.log(\"response sa json = \");\n            console.log(response);\n            if(response.cod !== 200){\n                setResponseObj(response)\n                throw new Error()\n            }\n            setResponseObj(response)\n            setLoading(false);\n            //console.log(\"evo citilist =\");\n            //console.log(cityList);\n            const responseCity = {\n                key : enteredCity,\n                response : response,\n                error : error,\n                loading : loading\n            }\n            \n            /*const curentCities = [];\n            curentCities.push(responseCity);\n            setCities(curentCities);*/\n            updateCityList(responseCity);\n                \n       })\n       .catch(error => {\n           setError(true);\n           setLoading(false);\n\n           console.log(error.message);\n           console.log(\"uhvatio sam error!\");\n       })\n    }\n\n    \n    return(\n        <div>\n           <h2>Find Current Weather Conditions</h2>\n           <form onSubmit={getForecast}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Enter City\"\n                    maxLength=\"50\"\n                    value={enteredCity}\n                    onChange={(e) => setEnteredCity(e.target.value)}\n                    className={styles.TextInput}\n                    />\n\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"imperial\"}\n                        value=\"imperial\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Fahrenheit\n                </label>\n                <label className={styles.Radio}>\n                    <input\n                        type=\"radio\"\n                        name=\"units\"\n                        checked={unit === \"metric\"}\n                        value=\"metric\"\n                        onChange={(e) => setUnit(e.target.value)}\n                        />\n                    Celsius\n                </label>\n                <button className={styles.Button} type=\"submit\">Get Forecast</button>\n            </form>\n                {/*!loading && cityList.length > 0 && <ForecastList cities={cityList}/>*/}\n                {<p>duljina cityList = {cityList.length}</p>}\n                {!loading && cityList.length > 0 && <div>ispiši</div>}\n                {loading && <p>Loading...</p>}\n        </div>\n    );\n\n}\n\nexport default Forecast;"]},"metadata":{},"sourceType":"module"}